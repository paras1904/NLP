# -*- coding: utf-8 -*-
"""kim.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QBlEJYnYyDDV1rul8o9uGR7aopBQB_Gt
"""

import nltk
import numpy as np
import random
import string
import textblob

raw ='how are you. rahul is good'

# f=open('chatbot.txt','r',errors = 'ignore')
# raw=f.read()
raw=raw.lower()# converts to lowercase
nltk.download('punkt') # first-time use only
nltk.download('wordnet') # first-time use only
sent_tokens = nltk.sent_tokenize(raw)# converts to list of sentences 
word_tokens = nltk.word_tokenize(raw)# converts to list of words
lemmer = nltk.stem.WordNetLemmatizer()
#WordNet is a semantically-oriented dictionary of English included in NLTK.
def LemTokens(tokens):
    return [lemmer.lemmatize(token) for token in tokens]
remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)
def LemNormalize(text):
    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))

GREETING_INPUTS = ("hello", "hi", "greetings", "sup", "what's up","hey",)
GREETING_RESPONSES = ["hi", "hey", "*nods*", "hi there", "hello", "I am glad! You are talking to me"]
def greeting(sentence):
 
    for word in sentence.split():
        if word.lower() in GREETING_INPUTS:
            return random.choice(GREETING_RESPONSES)

def sentiment_analysis(user_msg,data):
    df = ""
    x = df[[]]
    y = []
    from nltk import stem
    from nltk.corpus import stopwords
    stemmer = stem.SnowballStemmer('english')
    stopwords = set(stopwords.words('english'))
    def alternative_review_messages(sentence):
        sentence = sentence.lower()
        sentence = [word for word in sentence.split() if word not in stopwords]
        sentence = " ".join([stemmer.stem(word) for word in sentence])
        return sentence
    x[''] = x[''].apply(alternative_review_messages)
    from sklearn.model_selection import train_test_split
    x_train,x_test,y_train,y_test = (x,y)
    from sklearn.feature_extraction.text import TfidfVectorizer
    vectorizer = TfidfVectorizer()
    X_train = vectorizer.fit_transform(x_train)
    from sklearn.linear_model import LogisticRegression
    reg = LogisticRegression()
    reg.fit(X_train,y_train)
    msg = vectorizer.transform([usr_msg])
    sentiment = reg.predict(usr_msg)
    return sentiment

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
def response(user_response):
    robo_response=''
    sent_tokens.append(user_response)
    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')
    tfidf = TfidfVec.fit_transform(sent_tokens)
    vals = cosine_similarity(tfidf[-1], tfidf)
    idx=vals.argsort()[0][-2]
    flat = vals.flatten()
    flat.sort()
    req_tfidf = flat[-2]
    if(req_tfidf==0):
        robo_response=robo_response+"I am sorry! I don't understand you"
        return robo_response
    else:
        robo_response = robo_response+sent_tokens[idx]
        return robo_response
print(response('what are chatbots'))

flag=True
print("ROBO: My name is Robo. I will answer your queries about Chatbots. If you want to exit, type Bye!")
while(flag==True):
    user_response = input()
    user_response=user_response.lower()
    if(user_response!='bye'):
        if(user_response=='thanks' or user_response=='thank you' ):
            flag=False
            print("ROBO: You are welcome..")
        else:
            if(greeting(user_response)!=None):
                print("ROBO: "+greeting(user_response))
            else:
                print("ROBO: ",end="")
                print(response(user_response))
                sent_tokens.remove(user_response)
    else:
        flag=False
        print("ROBO: Bye! take care..")

