# -*- coding: utf-8 -*-
"""practice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-LIF9TJF6PEhntFO4U0sc6SHYqxq7tIs
"""

!pip install torch==1.10.2+cu113 torchvision==0.11.3+cu113 torchaudio===0.10.2+cu113 -f https://download.pytorch.org/whl/cu113/torch_stable.html

!pip install transformers

from transformers import AutoModelForQuestionAnswering, AutoTokenizer, pipeline

nlp = pipeline('question-answering', model='deepset/roberta-base-squad2', tokenizer='deepset/roberta-base-squad2')

!pip install anvil-uplink

import anvil.server

anvil.server.connect('SHK4IGUKNJXPYWE55BCRL4H2-QAG546EGK2V4TNPB')

@anvil.server.callable
def answer_questions(question_text, context_text): 
    question_set = {
                'question':question_text, 
                'context':context_text
               }
    results = nlp(question_set)
    return results['answer']


from ._anvil_designer import Form1Template
from anvil import *
import anvil.server

class Form1(Form1Template):

    def __init__(self, **properties):
        # Set Form properties and Data Bindings.
        self.init_components(**properties)

        # Any code you write here will run when the form opens.

    def primary_color_1_click(self, **event_args):
        # Access the values from the app 
        question_text = self.question_text.text
        context_text = self.input_text.text

        # Call the jupyter notebook uplink method
        result = anvil.server.call('answer_questions', question_text, context_text)

        # Show the result to the user
        self.answer_text.text = result

